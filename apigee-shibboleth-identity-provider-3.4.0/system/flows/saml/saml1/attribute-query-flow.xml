<flow xmlns="http://www.springframework.org/schema/webflow"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/webflow http://www.springframework.org/schema/webflow/spring-webflow.xsd"
    parent="saml.abstract">

    <!-- Bootstrap action has to be at the "top" of the flow after this flow prepends itself to parent. -->
    
    <action-state id="InitializeProfileRequestContext">
        <evaluate expression="InitializeProfileRequestContext" />
        <evaluate expression="'proceed'" />
        
        <transition on="proceed" to="DecodeMessage" />
    </action-state>

    <!-- This picks up from the parent flow. -->
    
    <action-state id="DoProfileWork">
        <evaluate expression="ResolveAttributes" />
        <evaluate expression="FilterAttributes" />
        <evaluate expression="FilterByQueriedAttributeDesignators" />
        <evaluate expression="'proceed'" />
        <transition on="proceed" to="CheckConsentCondition" />
    </action-state>

    <decision-state id="CheckConsentCondition">
        <if test="flowRequestContext.getActiveFlow().getApplicationContext().containsBean('shibboleth.consent.AttributeQuery.Condition') and flowRequestContext.getActiveFlow().getApplicationContext().getBean('shibboleth.consent.AttributeQuery.Condition').apply(opensamlProfileRequestContext)"
            then="ConsentSetup" else="ContinueProfileWork" />
    </decision-state>

    <action-state id="ConsentSetup">
        <evaluate expression="PopulateConsentInterceptContext" />
        <evaluate expression="opensamlProfileRequestContext.getSubcontext(T(net.shibboleth.idp.profile.context.ProfileInterceptorContext)).setAttemptedFlow(flowRequestContext.getActiveFlow().getApplicationContext().getBean('intercept/attribute-release-query'))" />
        <transition on="success" to="ConsentFlow" />
    </action-state>

    <subflow-state id="ConsentFlow" subflow="intercept/attribute-release-query">
        <input name="calledAsSubflow" value="true" />
        <transition on="proceed" to="ContinueProfileWork"/>
    </subflow-state>

    <action-state id="ContinueProfileWork">
        <evaluate expression="AddResponseShell" />
        <evaluate expression="AddInResponseToToResponse" />
        
        <evaluate expression="AddAttributeStatementToAssertion" />
        <evaluate expression="CopyNameIdentifierFromRequest" />
        <evaluate expression="AddSubjectConfirmationToSubjects" />
        <evaluate expression="AddNotBeforeConditionToAssertions" />
        <evaluate expression="AddNotOnOrAfterConditionToAssertions" />
        <evaluate expression="AddAudienceRestrictionToAssertions" />
        <evaluate expression="SignAssertions" />
        
        <evaluate expression="PostAssertionPopulateAuditContext" />
        <evaluate expression="PostResponsePopulateAuditContext" />

        <evaluate expression="'proceed'" />
        
        <transition on="proceed" to="ReturnToParentFlow" />
    </action-state>

    <!-- Outbound message handling completes in the parent flow. -->

    <!-- Error Response Generation -->

    <!-- We need to trap non-proceed transitions in these actions to avoid an infinite loop. -->

    <action-state id="HandleError">
        <on-entry>
            <evaluate expression="LogEvent" />
        </on-entry>
        <evaluate expression="InitializeOutboundMessageContextForError" />
        <evaluate expression="AddResponseShell" />
        <evaluate expression="AddInResponseToToResponse" />
        <evaluate expression="AddStatusToResponse" />
        
        <evaluate expression="PostResponsePopulateAuditContext" />
        
        <evaluate expression="'proceed'" />
        
        <transition on="proceed" to="ReturnToParentFlow" />
        <transition to="HandleErrorWithView" />
        
        <exception-handler bean="RethrowingFlowExecutionExceptionHandler"/>
    </action-state>
    
    <bean-import resource="attribute-query-beans.xml" />

</flow>
