<flow xmlns="http://www.springframework.org/schema/webflow"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/webflow http://www.springframework.org/schema/webflow/spring-webflow.xsd"
    parent="admin.abstract">

    <!-- Start action. -->
        
    <action-state id="InitializeProfileRequestContext">
        <evaluate expression="InitializeProfileRequestContext" />
        <evaluate expression="'proceed'" />
        
        <!-- Branch to determine if authentication is required. -->
        <transition on="proceed" to="DoAdminPreamble" />
    </action-state>

    <!-- Resume actual flow processing. -->

    <action-state id="DoProfileWork">
        <evaluate expression="CheckAccess" />
        <evaluate expression="'proceed'" />
        
        <transition on="proceed" to="CheckIfDone" />
    </action-state>

    <decision-state id="CheckIfDone">
        <if test="opensamlProfileRequestContext.getSubcontext(T(net.shibboleth.idp.profile.context.RelyingPartyContext)).getProfileConfig().isFlowExecuted()"
            then="end" else="PromptForPasswords" />
    </decision-state>
    
    <view-state id="PromptForPasswords" view="admin/unlock-keys">
        <on-render>
            <evaluate expression="environment" result="viewScope.environment" />
            <evaluate expression="opensamlProfileRequestContext" result="viewScope.profileRequestContext" />
            <evaluate expression="T(net.shibboleth.utilities.java.support.codec.HTMLEncoder)" result="viewScope.encoder" />
            <evaluate expression="flowRequestContext.getExternalContext().getNativeRequest()" result="viewScope.request" />
            <evaluate expression="flowRequestContext.getExternalContext().getNativeResponse()" result="viewScope.response" />
            <evaluate expression="flowRequestContext.getActiveFlow().getApplicationContext().containsBean('shibboleth.CustomViewContext') ? flowRequestContext.getActiveFlow().getApplicationContext().getBean('shibboleth.CustomViewContext') : null" result="viewScope.custom" />
        </on-render>

        <transition on="proceed" to="UnlockKeys" />
        <transition on="cancel" to="end" />
    </view-state>

    <action-state id="UnlockKeys">
        <evaluate expression="UnlockDataSealers" />
        <evaluate expression="UnlockPrivateKeys" />
        <evaluate expression="'proceed'" />
        
        <transition on="proceed" to="end" />
        <transition on="InvalidMessage" to="PromptForPasswords" />
    </action-state>
    
    <!-- Terminus -->

    <end-state id="end" view="admin/unlock-keys">
        <on-entry>
            <evaluate expression="opensamlProfileRequestContext.getSubcontext(T(net.shibboleth.idp.profile.context.RelyingPartyContext)).getProfileConfig().setFlowExecuted(true)" />
            <evaluate expression="WriteAuditLog" />
            <evaluate expression="environment" result="requestScope.environment" />
            <evaluate expression="opensamlProfileRequestContext" result="requestScope.profileRequestContext" />
            <evaluate expression="T(net.shibboleth.utilities.java.support.codec.HTMLEncoder)" result="requestScope.encoder" />
            <evaluate expression="flowRequestContext.getExternalContext().getNativeRequest()" result="requestScope.request" />
            <evaluate expression="flowRequestContext.getExternalContext().getNativeResponse()" result="requestScope.response" />
            <evaluate expression="flowRequestContext.getActiveFlow().getApplicationContext().containsBean('shibboleth.CustomViewContext') ? flowRequestContext.getActiveFlow().getApplicationContext().getBean('shibboleth.CustomViewContext') : null" result="requestScope.custom" />
        </on-entry>
    </end-state>
    
    <bean-import resource="unlock-keys-beans.xml" />

</flow>
