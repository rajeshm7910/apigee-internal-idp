include "playssl.conf"

# This is the main configuration file for the application.
# ~~~~~

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
#
# This must be changed for production, but we recommend not changing it in this file.
#
# See http://www.playframework.com/documentation/latest/ApplicationSecret for more details.
application.secret={T}conf_application_application.secret{/T}
# The application languages
# ~~~~~
application.langs={T}conf_application_application.langs{/T}

# Global object class
# ~~~~~
# Define the Global object class for this application.
# Default to Global in the root package.
# application.global={T}conf_application_application.global{/T}

# Router
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point.
# Furthermore, it's assumed your route file is named properly.
# So for an application router like `conf/my.application.Router`,
# you may need to define a router file `my.application.routes`.
# Default to Routes in the root package (and `conf/routes`)
# application.router={T}conf_application_application.router{/T}

# Database configuration
# ~~~~~
# You can declare as many datasources as you want.
# By convention, the default datasource is named `default`
#
# db.default.driver={T}conf_application_db.default.driver{/T}
# db.default.url={T}conf_application_db.default.url{/T}
# db.default.user={T}conf_application_db.default.user{/T}
# db.default.password={T}conf_application_db.default.password{/T}
#
# You can expose this datasource via JNDI if needed (Useful for JPA)
# db.default.jndiName={T}conf_application_db.default.jndiname{/T}

# Evolutions
# ~~~~~
# You can disable evolutions if needed
# evolutionplugin={T}conf_application_evolutionplugin{/T}

# Ebean configuration
# ~~~~~
# You can declare as many Ebean servers as you want.
# By convention, the default server is named `default`
#
# ebean.default={T}conf_application_ebean.default{/T}

# Logger
# ~~~~~
# You can also configure logback (http://logback.qos.ch/),
# by providing an application-logger.xml file in the conf directory.

# Root logger:
#logger.root={T}conf_application_logger.root{/T}

# Logger used by the framework:
#logger.play={T}conf_application_logger.play{/T}

# Logger provided to your application:
#logger.application={T}conf_application_logger.application{/T}

# WS configuration
# ~~~~~
# If you need to set proxy params for WS requests
# http.proxyHost ={T}conf_application_http.proxyhost{/T}
# http.proxyPort ={T}conf_application_http.proxyport{/T}
# http.proxyUser ={T}conf_application_http.proxyuser{/T}
# http.proxyPassword ={T}conf_application_http.proxypassword{/T}

# Session Configuration
# When running, play server warns that these configurations are deprecated
# DO NOT adopt the newest version as it would break E2E testing
# ~~~~~~~~~~~~~~~~~~~~~
session.secure={T}conf_application_session.secure{/T}
session.maxAge={T}conf_application_session.maxage{/T}
session.httpOnly={T}conf_application_session.httponly{/T}

# Akka
# ~~~~
play.akka.jvm-exit-on-fatal-error={T}conf_application_play.akka.jvm-exit-on-fatal-error{/T}

# Request compression when Play! server makes HTTP calls, e.g., to Management Server
ws.compressionEnabled={T}conf_application_ws.compressionenabled{/T}

# Max content-length multipart/form-data. Since bundles can be up to 15m, setting this to bigger than that.
play.http.parser.maxDiskBuffer={T}conf_application_play.http.parser.maxdiskbuffer{/T}
play.http.parser.maxMemoryBuffer={T}conf_application_play.http.parser.maxmemorybuffer{/T}

# When edge-ui is fronted by ELB who supports X-forwarded-for proto, the following properties allow the play server to correctly decode the HTTP scheme and port using X-forwarded-for headers sent by the ELB.
# For cases where edge-ui is not fronted by ELB, this is a noop.
play.http.forwarded.version={T}conf_application_play.http.forwarded.version{/T}
play.http.forwarded.trustedProxies={T}conf_application_play.http.forwarded.trustedproxies{/T}

