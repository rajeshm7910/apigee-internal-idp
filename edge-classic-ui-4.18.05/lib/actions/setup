#!/bin/bash
# SYNOPSIS: setup [-f CONFIG]
#
# FLAGS: -f CONFIG (optional) apply settings from given CONFIG file
#
# ARGUMENTS: none
#

if [ "$microkernel_installType" == "asg" ]; then
echo "Skipping edge-ui setup for ASG deployment as it's handled thru CWC"
exit 0
fi

source "${APIGEE_ROOT}/apigee-lib/apigee-lib.sh" || exit 1
source "${APIGEE_ROOT}/apigee-lib/dofflag.sh" || exit 1

validate_vars "${APIGEE_PREFIX}${APPLICATION}" "setup" || exit 1

APIGEE_SERVICE="${APIGEE_ROOT}/apigee-service/bin/apigee-service"
TOKEN_DIR="${APIGEE_ROOT}/token/application"
TOKEN_FILE="${TOKEN_DIR}/${APPLICATION}.properties"
mkdir -p ${TOKEN_DIR} && touch "${TOKEN_FILE}" || exit 1

# # # # # # # # # # # # # # # #
# Get admin and ldap passwords
# # # # # # # # # # # # # # # #

echo -e
ADMINEMAIL="${ADMIN_EMAIL}"

if [ -z "${APIGEE_ADMINPW}" ]; then
  ADMINPW=$(get_input "Enter global Apigee Edge admin password" mand="y" hidden="y")
else
  ADMINPW="${APIGEE_ADMINPW}"
fi

gen_secret(){
  local appn_secret=$("java" -cp "${COMPONENT_ROOT}/conf:${COMPONENT_ROOT}/lib/*" utils.EncryptUtil -newsecret)
  if [ $? -ne 0 ]; then
    echo "Unable to generate private key for application.secret"
    exit 1
  fi
  update_property "${TOKEN_FILE}" "conf_application_application.secret=\"${appn_secret}\""
  ${APIGEE_SERVICE} ${APIGEE_PREFIX}${APPLICATION} configure || exit 1
}

# generate random aplhanumeric string for application.secret
# generate string of size 64 and enclose within double quotes
# Function checks to see if the string has already been generated on the env once.
# If so, it wont re-generate. To check if it was already generate, we do two checks
# Check for the file apigee.conf, so that we know it is not the first time.
# utils.EncryptUtil "$ADMINEMAIL:$ADMINPW" is idempotent given that secret remains the same. So,
# We can run utils.EncryptUtil "$ADMINEMAIL:$ADMINPW" and match against apigee.mgmt.credential
# If the string matches, it means the random secret was already generated and used to encrypt apigee.mgmt.credential.
# If they do not match, we generate the string and let the setup encrypt other creds in the rest of setup steps.
check_and_gen_secret(){
  local apigee_conf_file="${COMPONENT_ROOT}/conf/apigee.conf"
  ${APIGEE_SERVICE} ${APIGEE_PREFIX}${APPLICATION} configure || exit 1
  if [ -f "$apigee_conf_file" ]; then
    local existing_cred=$(get_file_var "$apigee_conf_file" "apigee.mgmt.credential")
    existing_cred=$(echo "$existing_cred" | tr -d '"')
    local cred=$("java" -cp "${COMPONENT_ROOT}/conf:${COMPONENT_ROOT}/lib/*" utils.EncryptUtil "$ADMINEMAIL:$ADMINPW")
    if [ "$existing_cred" == "$cred" ]; then
      return 0
    else
      gen_secret
    fi
  else
    gen_secret
  fi
}

check_and_gen_secret

#Encrypt credentials
CREDENTIAL=$("java" -cp "${COMPONENT_ROOT}/conf:${COMPONENT_ROOT}/lib/*" utils.EncryptUtil "$ADMINEMAIL:$ADMINPW") || exit 1

update_property "${TOKEN_FILE}" "conf_apigee_apigee.mgmt.baseurl=\"${MS_SCHEME:-http}://${MSIP}:${APIGEE_PORT_HTTP_MS:-8080}/v1\""
update_property "${TOKEN_FILE}" "conf_apigee_apigee.mgmt.credential=\"${CREDENTIAL}\""

if [ "${EDGEUI_ENABLE_UNIFIED_UI}" == "y" ]; then
  update_property "${TOKEN_FILE}" "conf_apigee_apigee.feature.enableunifiedui=\"true\""
  update_property "${TOKEN_FILE}" "conf_apigee_apigee.emails.hosturl=\"${MANAGEMENT_UI_SCHEME}://${MANAGEMENT_UI_IP}:${MANAGEMENT_UI_PORT}\""
fi

# # # # # # # # #
# Configure SMTP
# # # # # # # # #

if [ -z "${SKIP_SMTP}" -o "${SKIP_SMTP}" == "n" ]; then
  if [ -z "${SMTPHOST}" ]; then
    echo "Configuring SMTP"
    echo "Leave blank and press Enter to skip SMTP configuration for now."
    SMTPHOST=`get_input "SMTP host" mand="n"`
    if [ -n "${SMTPHOST}" ]; then
      SMTPPORT=`get_input "SMTP port" mand="y"`
      SMTPSSL=`get_input "Use SSL y/n" type="y/n"  default="y"`
      SMTPSTARTTLS=`get_input "Use STARTTLS y/n" type="y/n"  default="n"`
      SMTPUSER=`get_input "SMTP user"`
      SMTPPASSWORD=`get_input "SMTP password" hidden="y" verify="y"`
    fi
  fi
else
  SMTPHOST=""
fi

if [ -n "${SMTPHOST}" -a -n "${SMTPPORT}" ]; then

  update_property "${TOKEN_FILE}" "conf_apigee_mail.smtp.host=\"${SMTPHOST}\""
  update_property "${TOKEN_FILE}" "conf_apigee_mail.smtp.port=\"${SMTPPORT}\""

  if [ "$SMTPSSL" == "y" ]; then
    update_property "${TOKEN_FILE}" "conf_apigee_mail.smtp.channel=\"ssl\""
  else
    update_property "${TOKEN_FILE}" "conf_apigee_mail.smtp.channel=\"\""
  fi

  if [ "$SMTPSTARTTLS" == "y" ]; then
    update_property "${TOKEN_FILE}" "conf_apigee_mail.smtp.tls=\"true\""
  else
    update_property "${TOKEN_FILE}" "conf_apigee_mail.smtp.tls=\"false\""
  fi

  if [ -n "${SMTPUSER}" -a "x${SMTPUSER}" != "x0" ]; then
    SMTP_CREDENTIAL=$("java" -cp "${COMPONENT_ROOT}/conf:${COMPONENT_ROOT}/lib/*" utils.EncryptUtil "$SMTPUSER:$SMTPPASSWORD") || exit 1
    update_property "${TOKEN_FILE}" "conf_apigee_mail.smtp.credential=\"${SMTP_CREDENTIAL}\""
  fi

  update_property "${TOKEN_FILE}" "conf_apigee_apigee.mgmt.mailfrom=\"${SMTPMAILFROM}\""

  SMTP_MSG=""
  echo "SMTP server successfully configured"
fi
${APIGEE_SERVICE} ${APIGEE_PREFIX}${APPLICATION} configure
echo "UI Server configuration complete."

